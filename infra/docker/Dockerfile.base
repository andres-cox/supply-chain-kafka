# Base image for all Python microservices
FROM python:3.10-slim as builder

# Set common environment variables
ENV POETRY_VERSION=2.1.2
ENV POETRY_HOME=/opt/poetry
ENV POETRY_NO_INTERACTION=1
ENV PYTHONUNBUFFERED=1
ENV POETRY_CACHE_DIR=/opt/poetry/cache
ENV PATH="/opt/poetry/bin:$PATH"

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Install Poetry with cache and configure it
RUN curl -sSL https://install.python-poetry.org | python3 - && \
    poetry config virtualenvs.create false

# Copy and install logging utils first for layer caching
COPY libs/logging_utils/pyproject.toml /app/libs/logging_utils/
WORKDIR /app/libs/logging_utils
RUN poetry install --no-interaction --no-root

# Now copy the actual logging utils code
COPY libs/logging_utils/logging_utils /app/libs/logging_utils/logging_utils
RUN poetry install --no-interaction

# Back to app directory for common dependencies
WORKDIR /app

# Copy and install common dependencies
COPY pyproject.common.toml ./pyproject.toml

# Install common dependencies with cache
RUN --mount=type=cache,target=/opt/poetry/cache \
    poetry install --no-interaction --no-root

# Runtime stage
FROM python:3.10-slim as runtime

# Copy installed packages and Poetry
COPY --from=builder /usr/local/lib/python3.10/site-packages /usr/local/lib/python3.10/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin
COPY --from=builder /opt/poetry /opt/poetry
COPY --from=builder /app/libs/logging_utils /app/libs/logging_utils

# Set PATH to include Poetry
ENV PATH="/opt/poetry/bin:$PATH"

# Set working directory
WORKDIR /app

# Add health check for services
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Set default environment variables
ENV PYTHONPATH=/app
ENV LOG_LEVEL=INFO